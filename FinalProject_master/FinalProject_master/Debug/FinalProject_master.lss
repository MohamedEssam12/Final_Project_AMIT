
FinalProject_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000047e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000047e  000004f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012d3  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000985  00000000  00000000  00001963  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a52  00000000  00000000  000022e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00002d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b9  00000000  00000000  00002f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ab  00000000  00000000  000034c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003c70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 3d 02 	jmp	0x47a	; 0x47a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

int main(void)
{
	//Initializations
	
	SPI_Init();
  82:	0e 94 3d 01 	call	0x27a	; 0x27a <SPI_Init>
	UART_Init();
  86:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Init>
	LCD_Init();
  8a:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_Init>
   uint8_t data_recieve = 0;
   
    while (1) 
    {
		
		data_recieve = UART_Receive();
  8e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <UART_Receive>
		
		switch (data_recieve)
  92:	81 11       	cpse	r24, r1
  94:	07 c0       	rjmp	.+14     	; 0xa4 <main+0x22>
		{
		
		// no data is stored from master	
			
		case  0 : 
		LCD_CLEAR();
  96:	0e 94 39 02 	call	0x472	; 0x472 <LCD_CLEAR>
		LCD_WRITE_STR("No Data transfer");	
  9a:	80 e6       	ldi	r24, 0x60	; 96
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_WRITE_STR>
			break;
  a2:	f5 cf       	rjmp	.-22     	; 0x8e <main+0xc>
			
		//stored data to be sent to slave	
			
		default:
		SPI_Transmit(data_recieve);
  a4:	0e 94 4c 01 	call	0x298	; 0x298 <SPI_Transmit>
		LCD_CLEAR();
  a8:	0e 94 39 02 	call	0x472	; 0x472 <LCD_CLEAR>
		LCD_WRITE_STR("Data OK");
  ac:	81 e7       	ldi	r24, 0x71	; 113
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_WRITE_STR>
		data_recieve = 0;
			break;
  b4:	ec cf       	rjmp	.-40     	; 0x8e <main+0xc>

000000b6 <DIO_SetPin_Direction>:

#include "DIO.h"

void DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_Direction direction)
{
	switch (direction)
  b6:	44 23       	and	r20, r20
  b8:	19 f0       	breq	.+6      	; 0xc0 <DIO_SetPin_Direction+0xa>
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	c9 f1       	breq	.+114    	; 0x130 <DIO_SetPin_Direction+0x7a>
  be:	08 95       	ret
	{
		case DIO_INPUT:
		switch (port)
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	91 f0       	breq	.+36     	; 0xe8 <DIO_SetPin_Direction+0x32>
  c4:	28 f0       	brcs	.+10     	; 0xd0 <DIO_SetPin_Direction+0x1a>
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	d9 f0       	breq	.+54     	; 0x100 <DIO_SetPin_Direction+0x4a>
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	29 f1       	breq	.+74     	; 0x118 <DIO_SetPin_Direction+0x62>
  ce:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_SetPin_Direction+0x26>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_SetPin_Direction+0x22>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	8a bb       	out	0x1a, r24	; 26
			break;
  e6:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  e8:	27 b3       	in	r18, 0x17	; 23
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_SetPin_Direction+0x3e>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_SetPin_Direction+0x3a>
  f8:	80 95       	com	r24
  fa:	82 23       	and	r24, r18
  fc:	87 bb       	out	0x17, r24	; 23
			break;
  fe:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
 100:	24 b3       	in	r18, 0x14	; 20
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_SetPin_Direction+0x56>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_SetPin_Direction+0x52>
 110:	80 95       	com	r24
 112:	82 23       	and	r24, r18
 114:	84 bb       	out	0x14, r24	; 20
			break;
 116:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
 118:	21 b3       	in	r18, 0x11	; 17
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_SetPin_Direction+0x6e>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_SetPin_Direction+0x6a>
 128:	80 95       	com	r24
 12a:	82 23       	and	r24, r18
 12c:	81 bb       	out	0x11, r24	; 17
			break;
 12e:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	89 f0       	breq	.+34     	; 0x156 <DIO_SetPin_Direction+0xa0>
 134:	28 f0       	brcs	.+10     	; 0x140 <DIO_SetPin_Direction+0x8a>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	c9 f0       	breq	.+50     	; 0x16c <DIO_SetPin_Direction+0xb6>
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	11 f1       	breq	.+68     	; 0x182 <DIO_SetPin_Direction+0xcc>
 13e:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 140:	2a b3       	in	r18, 0x1a	; 26
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_SetPin_Direction+0x96>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_SetPin_Direction+0x92>
 150:	82 2b       	or	r24, r18
 152:	8a bb       	out	0x1a, r24	; 26
			break;
 154:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 156:	27 b3       	in	r18, 0x17	; 23
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_SetPin_Direction+0xac>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_SetPin_Direction+0xa8>
 166:	82 2b       	or	r24, r18
 168:	87 bb       	out	0x17, r24	; 23
			break;
 16a:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 16c:	24 b3       	in	r18, 0x14	; 20
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_SetPin_Direction+0xc2>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_SetPin_Direction+0xbe>
 17c:	82 2b       	or	r24, r18
 17e:	84 bb       	out	0x14, r24	; 20
			break;
 180:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 182:	21 b3       	in	r18, 0x11	; 17
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_SetPin_Direction+0xd8>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_SetPin_Direction+0xd4>
 192:	82 2b       	or	r24, r18
 194:	81 bb       	out	0x11, r24	; 17
 196:	08 95       	ret

00000198 <DIO_SetPin_State>:
		break;
	}
}
void DIO_SetPin_State(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	switch (state)
 198:	44 23       	and	r20, r20
 19a:	19 f0       	breq	.+6      	; 0x1a2 <DIO_SetPin_State+0xa>
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	c9 f1       	breq	.+114    	; 0x212 <DIO_SetPin_State+0x7a>
 1a0:	08 95       	ret
	{
		case DIO_LOW:
		switch (port)
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	91 f0       	breq	.+36     	; 0x1ca <DIO_SetPin_State+0x32>
 1a6:	28 f0       	brcs	.+10     	; 0x1b2 <DIO_SetPin_State+0x1a>
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	d9 f0       	breq	.+54     	; 0x1e2 <DIO_SetPin_State+0x4a>
 1ac:	83 30       	cpi	r24, 0x03	; 3
 1ae:	29 f1       	breq	.+74     	; 0x1fa <DIO_SetPin_State+0x62>
 1b0:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 1b2:	2b b3       	in	r18, 0x1b	; 27
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_SetPin_State+0x26>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_SetPin_State+0x22>
 1c2:	80 95       	com	r24
 1c4:	82 23       	and	r24, r18
 1c6:	8b bb       	out	0x1b, r24	; 27
			break;
 1c8:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 1ca:	28 b3       	in	r18, 0x18	; 24
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_SetPin_State+0x3e>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_SetPin_State+0x3a>
 1da:	80 95       	com	r24
 1dc:	82 23       	and	r24, r18
 1de:	88 bb       	out	0x18, r24	; 24
			break;
 1e0:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 1e2:	25 b3       	in	r18, 0x15	; 21
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_SetPin_State+0x56>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_SetPin_State+0x52>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	85 bb       	out	0x15, r24	; 21
			break;
 1f8:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 1fa:	22 b3       	in	r18, 0x12	; 18
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_SetPin_State+0x6e>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_SetPin_State+0x6a>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	82 bb       	out	0x12, r24	; 18
			break;
 210:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (port)
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	89 f0       	breq	.+34     	; 0x238 <DIO_SetPin_State+0xa0>
 216:	28 f0       	brcs	.+10     	; 0x222 <DIO_SetPin_State+0x8a>
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	c9 f0       	breq	.+50     	; 0x24e <DIO_SetPin_State+0xb6>
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	11 f1       	breq	.+68     	; 0x264 <DIO_SetPin_State+0xcc>
 220:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 222:	2b b3       	in	r18, 0x1b	; 27
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_SetPin_State+0x96>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_SetPin_State+0x92>
 232:	82 2b       	or	r24, r18
 234:	8b bb       	out	0x1b, r24	; 27
			break;
 236:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 238:	28 b3       	in	r18, 0x18	; 24
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_SetPin_State+0xac>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_SetPin_State+0xa8>
 248:	82 2b       	or	r24, r18
 24a:	88 bb       	out	0x18, r24	; 24
			break;
 24c:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 24e:	25 b3       	in	r18, 0x15	; 21
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_SetPin_State+0xc2>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_SetPin_State+0xbe>
 25e:	82 2b       	or	r24, r18
 260:	85 bb       	out	0x15, r24	; 21
			break;
 262:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 264:	22 b3       	in	r18, 0x12	; 18
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_SetPin_State+0xd8>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_SetPin_State+0xd4>
 274:	82 2b       	or	r24, r18
 276:	82 bb       	out	0x12, r24	; 18
 278:	08 95       	ret

0000027a <SPI_Init>:
#include "SPI.h"

void SPI_Init(void)
{
	#if SPI_MODE == MASTER
	SET_BIT(SPI_PORT, MOSI);/*Define direction as output*/
 27a:	87 b3       	in	r24, 0x17	; 23
 27c:	80 62       	ori	r24, 0x20	; 32
 27e:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(SPI_PORT, MISO);/*Define direction as input*/
 280:	87 b3       	in	r24, 0x17	; 23
 282:	8f 7b       	andi	r24, 0xBF	; 191
 284:	87 bb       	out	0x17, r24	; 23
	SET_BIT(SPI_PORT, CLK);/*Define direction as output*/
 286:	87 b3       	in	r24, 0x17	; 23
 288:	80 68       	ori	r24, 0x80	; 128
 28a:	87 bb       	out	0x17, r24	; 23
	SET_BIT(SPI_PORT, SS); /*Define direction as output*/
 28c:	87 b3       	in	r24, 0x17	; 23
 28e:	80 61       	ori	r24, 0x10	; 16
 290:	87 bb       	out	0x17, r24	; 23
	SPCR = 0x53;//0b 0101 0011
 292:	83 e5       	ldi	r24, 0x53	; 83
 294:	8d b9       	out	0x0d, r24	; 13
 296:	08 95       	ret

00000298 <SPI_Transmit>:
	SPCR = 0x43;//0b 0100 0011
	#endif
}
void SPI_Transmit(uint8_t data)
{
	SPDR = data;
 298:	8f b9       	out	0x0f, r24	; 15
	while (GET_BIT(SPSR, SPIF) != 1);
 29a:	77 9b       	sbis	0x0e, 7	; 14
 29c:	fe cf       	rjmp	.-4      	; 0x29a <SPI_Transmit+0x2>
}
 29e:	08 95       	ret

000002a0 <UART_Init>:
}
void UART_Transmit(uint8_t data)
{
	UDR = data;
	while (GET_BIT(UCSRA, TXC) != 1);
}
 2a0:	88 e1       	ldi	r24, 0x18	; 24
 2a2:	8a b9       	out	0x0a, r24	; 10
 2a4:	86 e8       	ldi	r24, 0x86	; 134
 2a6:	80 bd       	out	0x20, r24	; 32
 2a8:	87 e6       	ldi	r24, 0x67	; 103
 2aa:	89 b9       	out	0x09, r24	; 9
 2ac:	10 bc       	out	0x20, r1	; 32
 2ae:	08 95       	ret

000002b0 <UART_Receive>:
uint8_t UART_Receive(void)
{
	while (GET_BIT(UCSRA, RXC) != 1);
 2b0:	5f 9b       	sbis	0x0b, 7	; 11
 2b2:	fe cf       	rjmp	.-4      	; 0x2b0 <UART_Receive>
	return UDR;
 2b4:	8c b1       	in	r24, 0x0c	; 12
 2b6:	08 95       	ret

000002b8 <LCD_WRITE_CMD>:
void LCD_WRITE_NBR(uint32_t numbr)
{
	uint8_t num[10];
	ltoa(numbr, (uint8_t*)num, 10);//Long to Ascii
	LCD_WRITE_STR(num);
}
 2b8:	cf 93       	push	r28
 2ba:	c8 2f       	mov	r28, r24
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPin_State>
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	62 e0       	ldi	r22, 0x02	; 2
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPin_State>
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	63 e0       	ldi	r22, 0x03	; 3
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPin_State>
 2da:	8b b3       	in	r24, 0x1b	; 27
 2dc:	9c 2f       	mov	r25, r28
 2de:	90 7f       	andi	r25, 0xF0	; 240
 2e0:	8f 70       	andi	r24, 0x0F	; 15
 2e2:	89 2b       	or	r24, r25
 2e4:	8b bb       	out	0x1b, r24	; 27
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	63 e0       	ldi	r22, 0x03	; 3
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPin_State>
 2f0:	8f e9       	ldi	r24, 0x9F	; 159
 2f2:	9f e0       	ldi	r25, 0x0F	; 15
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <LCD_WRITE_CMD+0x3c>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <LCD_WRITE_CMD+0x42>
 2fa:	00 00       	nop
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	63 e0       	ldi	r22, 0x03	; 3
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPin_State>
 306:	20 e1       	ldi	r18, 0x10	; 16
 308:	c2 9f       	mul	r28, r18
 30a:	c0 01       	movw	r24, r0
 30c:	11 24       	eor	r1, r1
 30e:	9b b3       	in	r25, 0x1b	; 27
 310:	9f 70       	andi	r25, 0x0F	; 15
 312:	89 2b       	or	r24, r25
 314:	8b bb       	out	0x1b, r24	; 27
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	63 e0       	ldi	r22, 0x03	; 3
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPin_State>
 320:	8f e9       	ldi	r24, 0x9F	; 159
 322:	9f e0       	ldi	r25, 0x0F	; 15
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <LCD_WRITE_CMD+0x6c>
 328:	00 c0       	rjmp	.+0      	; 0x32a <LCD_WRITE_CMD+0x72>
 32a:	00 00       	nop
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	63 e0       	ldi	r22, 0x03	; 3
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPin_State>
 336:	8f e3       	ldi	r24, 0x3F	; 63
 338:	9f e1       	ldi	r25, 0x1F	; 31
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <LCD_WRITE_CMD+0x82>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <LCD_WRITE_CMD+0x88>
 340:	00 00       	nop
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <LCD_Init>:
 346:	41 e0       	ldi	r20, 0x01	; 1
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPin_Direction>
 350:	41 e0       	ldi	r20, 0x01	; 1
 352:	62 e0       	ldi	r22, 0x02	; 2
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPin_Direction>
 35a:	41 e0       	ldi	r20, 0x01	; 1
 35c:	63 e0       	ldi	r22, 0x03	; 3
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPin_Direction>
 364:	41 e0       	ldi	r20, 0x01	; 1
 366:	64 e0       	ldi	r22, 0x04	; 4
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPin_Direction>
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	65 e0       	ldi	r22, 0x05	; 5
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPin_Direction>
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	66 e0       	ldi	r22, 0x06	; 6
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPin_Direction>
 382:	41 e0       	ldi	r20, 0x01	; 1
 384:	67 e0       	ldi	r22, 0x07	; 7
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPin_Direction>
 38c:	2f ef       	ldi	r18, 0xFF	; 255
 38e:	81 ee       	ldi	r24, 0xE1	; 225
 390:	94 e0       	ldi	r25, 0x04	; 4
 392:	21 50       	subi	r18, 0x01	; 1
 394:	80 40       	sbci	r24, 0x00	; 0
 396:	90 40       	sbci	r25, 0x00	; 0
 398:	e1 f7       	brne	.-8      	; 0x392 <LCD_Init+0x4c>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <LCD_Init+0x56>
 39c:	00 00       	nop
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_WRITE_CMD>
 3a4:	83 e3       	ldi	r24, 0x33	; 51
 3a6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_WRITE_CMD>
 3aa:	82 e3       	ldi	r24, 0x32	; 50
 3ac:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_WRITE_CMD>
 3b0:	88 e2       	ldi	r24, 0x28	; 40
 3b2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_WRITE_CMD>
 3b6:	8c e0       	ldi	r24, 0x0C	; 12
 3b8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_WRITE_CMD>
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_WRITE_CMD>
 3c2:	86 e0       	ldi	r24, 0x06	; 6
 3c4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_WRITE_CMD>
 3c8:	08 95       	ret

000003ca <LCD_WRITE_DTA>:
 3ca:	cf 93       	push	r28
 3cc:	c8 2f       	mov	r28, r24
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPin_State>
 3d8:	40 e0       	ldi	r20, 0x00	; 0
 3da:	62 e0       	ldi	r22, 0x02	; 2
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPin_State>
 3e2:	40 e0       	ldi	r20, 0x00	; 0
 3e4:	63 e0       	ldi	r22, 0x03	; 3
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPin_State>
 3ec:	8b b3       	in	r24, 0x1b	; 27
 3ee:	9c 2f       	mov	r25, r28
 3f0:	90 7f       	andi	r25, 0xF0	; 240
 3f2:	8f 70       	andi	r24, 0x0F	; 15
 3f4:	89 2b       	or	r24, r25
 3f6:	8b bb       	out	0x1b, r24	; 27
 3f8:	41 e0       	ldi	r20, 0x01	; 1
 3fa:	63 e0       	ldi	r22, 0x03	; 3
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPin_State>
 402:	8f e9       	ldi	r24, 0x9F	; 159
 404:	9f e0       	ldi	r25, 0x0F	; 15
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	63 e0       	ldi	r22, 0x03	; 3
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPin_State>
 418:	20 e1       	ldi	r18, 0x10	; 16
 41a:	c2 9f       	mul	r28, r18
 41c:	c0 01       	movw	r24, r0
 41e:	11 24       	eor	r1, r1
 420:	9b b3       	in	r25, 0x1b	; 27
 422:	9f 70       	andi	r25, 0x0F	; 15
 424:	89 2b       	or	r24, r25
 426:	8b bb       	out	0x1b, r24	; 27
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	63 e0       	ldi	r22, 0x03	; 3
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPin_State>
 432:	8f e9       	ldi	r24, 0x9F	; 159
 434:	9f e0       	ldi	r25, 0x0F	; 15
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
 43e:	40 e0       	ldi	r20, 0x00	; 0
 440:	63 e0       	ldi	r22, 0x03	; 3
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPin_State>
 448:	8f e3       	ldi	r24, 0x3F	; 63
 44a:	9f e1       	ldi	r25, 0x1F	; 31
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 452:	00 00       	nop
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <LCD_WRITE_STR>:
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	ec 01       	movw	r28, r24
 45e:	03 c0       	rjmp	.+6      	; 0x466 <LCD_WRITE_STR+0xe>
 460:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_WRITE_DTA>
 464:	21 96       	adiw	r28, 0x01	; 1
 466:	88 81       	ld	r24, Y
 468:	81 11       	cpse	r24, r1
 46a:	fa cf       	rjmp	.-12     	; 0x460 <LCD_WRITE_STR+0x8>
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <LCD_CLEAR>:
void LCD_CLEAR(void)/*Clear data display on screen*/
{
	LCD_WRITE_CMD(0x01);
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_WRITE_CMD>
 478:	08 95       	ret

0000047a <_exit>:
 47a:	f8 94       	cli

0000047c <__stop_program>:
 47c:	ff cf       	rjmp	.-2      	; 0x47c <__stop_program>
